// <auto-generated />
using Geocaching;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Geocaching.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190409190255_TestID")]
    partial class TestID
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Geocaching.Models.FoundGeocache", b =>
                {
                    b.Property<int>("GeocasheID");

                    b.Property<int>("PersonID");

                    b.HasKey("GeocasheID", "PersonID");

                    b.HasIndex("PersonID");

                    b.ToTable("FoundGeocaches");
                });

            modelBuilder.Entity("Geocaching.Models.Geocashe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("PersonId");

                    b.HasKey("ID");

                    b.HasIndex("PersonId");

                    b.ToTable("Geocashes");
                });

            modelBuilder.Entity("Geocaching.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("StreetNumber");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Geocaching.Models.FoundGeocache", b =>
                {
                    b.HasOne("Geocaching.Models.Geocashe", "Geocashe")
                        .WithMany()
                        .HasForeignKey("GeocasheID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Geocaching.Models.Person", "Person")
                        .WithMany("FoundGeocaches")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Geocaching.Models.Geocashe", b =>
                {
                    b.HasOne("Geocaching.Models.Person", "Person")
                        .WithMany("Geocashes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Microsoft.Maps.MapControl.WPF.Location", "Location", b1 =>
                        {
                            b1.Property<int>("GeocasheID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Latitude")
                                .HasColumnName("Latitude")
                                .HasColumnType("FLOAT");

                            b1.Property<double>("Longitude")
                                .HasColumnName("Longitude")
                                .HasColumnType("FLOAT");

                            b1.HasKey("GeocasheID");

                            b1.ToTable("Geocashes");

                            b1.HasOne("Geocaching.Models.Geocashe")
                                .WithOne("Location")
                                .HasForeignKey("Microsoft.Maps.MapControl.WPF.Location", "GeocasheID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Geocaching.Models.Person", b =>
                {
                    b.OwnsOne("Microsoft.Maps.MapControl.WPF.Location", "Location", b1 =>
                        {
                            b1.Property<int>("PersonID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Latitude")
                                .HasColumnName("Latitude")
                                .HasColumnType("FLOAT");

                            b1.Property<double>("Longitude")
                                .HasColumnName("Longitude")
                                .HasColumnType("FLOAT");

                            b1.HasKey("PersonID");

                            b1.ToTable("Persons");

                            b1.HasOne("Geocaching.Models.Person")
                                .WithOne("Location")
                                .HasForeignKey("Microsoft.Maps.MapControl.WPF.Location", "PersonID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
